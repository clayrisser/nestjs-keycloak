declare class AgtypeParser extends antlr4.Parser {
    static grammarFileName: string;
    static literalNames: (string | null)[];
    static symbolicNames: (string | null)[];
    static ruleNames: string[];
    constructor(input: any);
    _interp: any;
    ruleNames: string[];
    literalNames: (string | null)[];
    symbolicNames: (string | null)[];
    get atn(): any;
    agType(): AgTypeContext;
    agValue(): AgValueContext;
    value(): ValueContext;
    obj(): ObjContext;
    pair(): PairContext;
    array(): ArrayContext;
    typeAnnotation(): TypeAnnotationContext;
    floatLiteral(): FloatLiteralContext;
}
declare namespace AgtypeParser {
    export const EOF: number;
    export const T__0: number;
    export const T__1: number;
    export const T__2: number;
    export const T__3: number;
    export const T__4: number;
    export const T__5: number;
    export const T__6: number;
    export const T__7: number;
    export const T__8: number;
    export const T__9: number;
    export const T__10: number;
    export const T__11: number;
    export const T__12: number;
    export const IDENT: number;
    export const STRING: number;
    export const INTEGER: number;
    export const RegularFloat: number;
    export const ExponentFloat: number;
    export const WS: number;
    export const RULE_agType: number;
    export const RULE_agValue: number;
    export const RULE_value: number;
    export const RULE_obj: number;
    export const RULE_pair: number;
    export const RULE_array: number;
    export const RULE_typeAnnotation: number;
    export const RULE_floatLiteral: number;
    export { NullValueContext };
    export { ObjectValueContext };
    export { IntegerValueContext };
    export { TrueBooleanContext };
    export { FalseBooleanContext };
    export { FloatValueContext };
    export { StringValueContext };
    export { ArrayValueContext };
    export { AgTypeContext };
    export { AgValueContext };
    export { ValueContext };
    export { ObjContext };
    export { PairContext };
    export { ArrayContext };
    export { TypeAnnotationContext };
    export { FloatLiteralContext };
}
export default AgtypeParser;
import antlr4 from "antlr4";
declare class AgTypeContext extends antlr4.ParserRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    agValue(): any;
    EOF(): antlr4.Token;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
}
declare class AgValueContext extends antlr4.ParserRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    value(): any;
    typeAnnotation(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
}
declare class ValueContext extends antlr4.ParserRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    copyFrom(ctx: any): void;
}
declare class ObjContext extends antlr4.ParserRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    pair: (i: any) => any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
}
declare class PairContext extends antlr4.ParserRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    STRING(): antlr4.Token;
    agValue(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
}
declare class ArrayContext extends antlr4.ParserRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    agValue: (i: any) => any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
}
declare class TypeAnnotationContext extends antlr4.ParserRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    IDENT(): antlr4.Token;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
}
declare class FloatLiteralContext extends antlr4.ParserRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    RegularFloat(): antlr4.Token;
    ExponentFloat(): antlr4.Token;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
}
declare class NullValueContext extends ValueContext {
    constructor(parser: any, ctx: any);
    enterRule(listener: any): void;
    exitRule(listener: any): void;
}
declare class ObjectValueContext extends ValueContext {
    constructor(parser: any, ctx: any);
    obj(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
}
declare class IntegerValueContext extends ValueContext {
    constructor(parser: any, ctx: any);
    INTEGER(): antlr4.Token;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
}
declare class TrueBooleanContext extends ValueContext {
    constructor(parser: any, ctx: any);
    enterRule(listener: any): void;
    exitRule(listener: any): void;
}
declare class FalseBooleanContext extends ValueContext {
    constructor(parser: any, ctx: any);
    enterRule(listener: any): void;
    exitRule(listener: any): void;
}
declare class FloatValueContext extends ValueContext {
    constructor(parser: any, ctx: any);
    floatLiteral(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
}
declare class StringValueContext extends ValueContext {
    constructor(parser: any, ctx: any);
    STRING(): antlr4.Token;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
}
declare class ArrayValueContext extends ValueContext {
    constructor(parser: any, ctx: any);
    array(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
}
