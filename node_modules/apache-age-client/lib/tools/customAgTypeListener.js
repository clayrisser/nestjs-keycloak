(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./AgtypeListener"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./AgtypeListener"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.AgtypeListener);
    global.customAgTypeListener = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _AgtypeListener) {
  "use strict";

  var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CustomAgTypeListener = void 0;
  _AgtypeListener = _interopRequireDefault(_AgtypeListener);

  /**
   * File: /src/tools/customAgTypeListener.ts
   * Project: apache-age-client
   * File Created: 13-09-2022 04:45:20
   * Author: Apache Software Foundation
   * -----
   * Last Modified: 13-09-2022 07:01:22
   * Modified By: Clay Risser
   * -----
   * Risser Labs LLC (c) Copyright 2022
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class CustomAgTypeListener extends _AgtypeListener.default {
    constructor() {
      super(...arguments);
      this.rootObject = null;
      this.objectInsider = [];
      this.prevObject = null;
      this.lastObject = null;
      this.lastValue = null;
    }

    mergeArrayOrObject(key) {
      if (this.prevObject instanceof Array) {
        this.mergeArray();
      } else {
        this.mergeObject(key);
      }
    }

    mergeArray() {
      this.prevObject.push(this.lastObject);
      this.lastObject = this.prevObject;
      this.objectInsider.shift();
      this.prevObject = this.objectInsider[1];
    }

    mergeObject(key) {
      this.prevObject[key] = this.lastObject;
      this.lastObject = this.prevObject;
      this.objectInsider.shift();
      this.prevObject = this.objectInsider[1];
    }

    createNewObject() {
      const newObject = {};
      this.objectInsider.unshift(newObject);
      this.prevObject = this.lastObject;
      this.lastObject = newObject;
    }

    createNewArray() {
      const newObject = [];
      this.objectInsider.unshift(newObject);
      this.prevObject = this.lastObject;
      this.lastObject = newObject;
    }

    pushIfArray(value) {
      if (this.lastObject instanceof Array) {
        this.lastObject.push(value);
        return true;
      }

      return false;
    }

    exitStringValue(ctx) {
      const value = this.stripQuotes(ctx.getText());

      if (!this.pushIfArray(value)) {
        this.lastValue = value;
      }
    }

    exitIntegerValue(ctx) {
      const value = parseInt(ctx.getText());

      if (!this.pushIfArray(value)) {
        this.lastValue = value;
      }
    }

    exitFloatValue(ctx) {
      const value = parseFloat(ctx.getText());

      if (!this.pushIfArray(value)) {
        this.lastValue = value;
      }
    }

    exitTrueBoolean(_ctx) {
      const value = true;

      if (!this.pushIfArray(value)) {
        this.lastValue = value;
      }
    }

    exitFalseBoolean(_ctx) {
      const value = false;

      if (!this.pushIfArray(value)) {
        this.lastValue = value;
      }
    }

    exitNullValue(_ctx) {
      const value = null;

      if (!this.pushIfArray(value)) {
        this.lastValue = value;
      }
    }

    exitFloatLiteral(ctx) {
      const value = ctx.getText();

      if (!this.pushIfArray(value)) {
        this.lastValue = value;
      }
    }

    enterObjectValue(_ctx) {
      this.createNewObject();
    }

    enterArrayValue(_ctx) {
      this.createNewArray();
    }

    exitObjectValue(_ctx) {
      if (this.prevObject instanceof Array) {
        this.mergeArray();
      }
    }

    exitPair(ctx) {
      const name = this.stripQuotes(ctx.STRING().getText());

      if (this.lastValue !== undefined) {
        this.lastObject[name] = this.lastValue;
        this.lastValue = undefined;
      } else {
        this.mergeArrayOrObject(name);
      }
    }

    exitAgType(_ctx) {
      this.rootObject = this.objectInsider.shift();
    }

    stripQuotes(quotesString) {
      return JSON.parse(quotesString);
    }

    getResult() {
      return this.rootObject || this.lastValue;
    }

  }

  _exports.CustomAgTypeListener = CustomAgTypeListener;
});
//# sourceMappingURL=customAgTypeListener.js.map