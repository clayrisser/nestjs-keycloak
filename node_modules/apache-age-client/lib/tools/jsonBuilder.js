(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../config"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../config"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.config);
    global.jsonBuilder = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _config) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.createEdge = createEdge;
  _exports.createVertex = createVertex;
  _exports.jsonStringify = jsonStringify;
  _exports.stringWrap = stringWrap;

  /**
   * File: /src/tools/jsonBuilder.ts
   * Project: apache-age-client
   * File Created: 13-09-2022 05:24:37
   * Author: Apache Software Foundation
   * -----
   * Last Modified: 13-09-2022 07:01:22
   * Modified By: Clay Risser
   * -----
   * Risser Labs LLC (c) Copyright 2022
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function stringWrap(value) {
    let _flavor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _config.flavors.AGE;

    return JSON.stringify(value);
  }

  function jsonStringify(record) {
    let flavor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _config.flavors.AGE;
    let ageJsonStr = "{";
    let isFirst = true;

    for (const [key, value] of Object.entries(record)) {
      if (!isFirst) {
        ageJsonStr = ageJsonStr + ",";
      }

      let valueWrapped = stringWrap(value, flavor);
      ageJsonStr = ageJsonStr + `${key}:${valueWrapped}`;
      isFirst = false;
    }

    ageJsonStr = ageJsonStr + "}";
    return ageJsonStr;
  }

  async function createVertex(client, graphPathStr, label, record, flavor) {
    const createQ = `CREATE (n:${label} ${jsonStringify(record, flavor)})`;

    if (flavor === "AGE") {
      return ageCreateVertex(client, graphPathStr, createQ);
    } else {
      throw new Error(`Unknown flavor ${flavor}`);
    }
  }

  async function ageCreateVertex(client, graphPathStr, createQ) {
    await client.query(`select *
         from cypher('${graphPathStr}', $$ ${createQ} $$) as (a agtype)`);
  }

  async function createEdge(client, label, record, graphPathStr, edgeStartLabel, edgeEndLabel, startNodeName, endNodeName, flavor) {
    const createQ = `CREATE (:${edgeStartLabel} {name: ${stringWrap(startNodeName, flavor)}})-[n:${label} ${jsonStringify(record, flavor)}]->(:${edgeEndLabel} {name: ${stringWrap(endNodeName, flavor)}})`;

    if (flavor === "AGE") {
      return AGECreateEdge(client, graphPathStr, createQ);
    } else {
      throw new Error(`Unknown flavor ${flavor}`);
    }
  }

  async function AGECreateEdge(client, graphPathStr, createQ) {
    await client.query(`select *
         from cypher('${graphPathStr}', $$ ${createQ} $$) as (a agtype)`);
  }
});
//# sourceMappingURL=jsonBuilder.js.map