(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "path", "fs", "../config"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("path"), require("fs"), require("../config"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.path, global.fs, global.config);
    global.sqlFlavorManager = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, path, _fs, _config) {
  "use strict";

  var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getQuery = getQuery;
  path = _interopRequireWildcard(path);
  _fs = _interopRequireDefault(_fs);

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  /**
   * File: /src/tools/sqlFlavorManager.ts
   * Project: apache-age-client
   * File Created: 13-09-2022 04:45:20
   * Author: Apache Software Foundation
   * -----
   * Last Modified: 13-09-2022 07:03:37
   * Modified By: Clay Risser
   * -----
   * Risser Labs LLC (c) Copyright 2022
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const sqlBasePath = path.join(__dirname, "../../sql");

  function getQuery(name) {
    let flavor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _config.flavors.AGE;
    const defaultSqlPath = path.join(sqlBasePath, `./${name}/default.sql`);
    let sqlPath = path.join(sqlBasePath, `./${name}/${flavor}.sql`);
    if (_fs.default.existsSync(defaultSqlPath)) sqlPath = defaultSqlPath;

    if (!_fs.default.existsSync(sqlPath)) {
      throw new Error(`sql does not exist for name ${name}`);
    }

    return _fs.default.readFileSync(sqlPath, "utf8");
  }
});
//# sourceMappingURL=sqlFlavorManager.js.map