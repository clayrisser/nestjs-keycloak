(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./services", "./graphRepository", "./config", "./types", "./tools"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./services"), require("./graphRepository"), require("./config"), require("./types"), require("./tools"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.services, global.graphRepository, global.config, global.types, global.tools);
    global.index = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _services, _graphRepository, _config, _types, _tools) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  var _exportNames = {
    ApacheAgeClient: true
  };
  _exports.default = _exports.ApacheAgeClient = void 0;
  Object.keys(_services).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in _exports && _exports[key] === _services[key]) return;
    Object.defineProperty(_exports, key, {
      enumerable: true,
      get: function () {
        return _services[key];
      }
    });
  });
  Object.keys(_graphRepository).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in _exports && _exports[key] === _graphRepository[key]) return;
    Object.defineProperty(_exports, key, {
      enumerable: true,
      get: function () {
        return _graphRepository[key];
      }
    });
  });
  Object.keys(_config).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in _exports && _exports[key] === _config[key]) return;
    Object.defineProperty(_exports, key, {
      enumerable: true,
      get: function () {
        return _config[key];
      }
    });
  });
  Object.keys(_types).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in _exports && _exports[key] === _types[key]) return;
    Object.defineProperty(_exports, key, {
      enumerable: true,
      get: function () {
        return _types[key];
      }
    });
  });
  Object.keys(_tools).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in _exports && _exports[key] === _tools[key]) return;
    Object.defineProperty(_exports, key, {
      enumerable: true,
      get: function () {
        return _tools[key];
      }
    });
  });

  /**
   * File: /src/index.ts
   * Project: apache-age-client
   * File Created: 13-09-2022 04:18:52
   * Author: Apache Software Foundation
   * -----
   * Last Modified: 13-09-2022 07:39:56
   * Modified By: Clay Risser
   * -----
   * Risser Labs LLC (c) Copyright 2022
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class ApacheAgeClient {
    constructor(graphRepository, databaseService, cypherService) {
      this.graphRepository = graphRepository;
      this.databaseService = databaseService;
      this.cypherService = cypherService;
    }

    static async connect(connectionInfo) {
      const graphRepository = new _graphRepository.GraphRepository(connectionInfo);
      const databaseService = new _services.DatabaseService();
      await databaseService.connectDatabase(connectionInfo);
      const cypherService = new _services.CypherService(graphRepository);
      return new ApacheAgeClient(graphRepository, databaseService, cypherService);
    }

    get graph() {
      return this.graphRepository.graph;
    }

    isConnected() {
      return this.databaseService.isConnected();
    }

    async disconnect() {
      return this.databaseService.disconnectDatabase();
    }

    async getMetaData() {
      return this.databaseService.getMetaData();
    }

    async getGraphLabels() {
      return this.databaseService.getGraphLabels();
    }

    async getGraphLabelCount(labelName, labelKind) {
      return this.databaseService.getGraphLabelCount(labelName, labelKind);
    }

    async getNodes() {
      return this.databaseService.getNodes();
    }

    async getEdges() {
      return this.databaseService.getEdges();
    }

    async getPropertyKeys() {
      return this.databaseService.getPropertyKeys();
    }

    async getRole() {
      return this.databaseService.getRole();
    }

    async getConnectionStatus() {
      return this.databaseService.getConnectionStatus();
    }

    async executeCypher(query) {
      return this.cypherService.executeCypher(query);
    }

    async getConnection() {
      return this.graphRepository.getConnection();
    }

    async getConnectionInfo() {
      return this.graphRepository.getConnectionInfo();
    }

  }

  _exports.ApacheAgeClient = ApacheAgeClient;
  var _default = ApacheAgeClient;
  _exports.default = _default;
});
//# sourceMappingURL=index.js.map