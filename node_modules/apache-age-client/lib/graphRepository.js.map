{"version":3,"file":"graphRepository.js","names":["GraphRepository","constructor","host","port","database","graph","user","password","flavor","_database","_graph","_host","_password","_pool","_port","_user","flavors","AGE","getConnection","closeConnection","client","pg","Client","connect","setAgeTypes","types","Error","end","newConnectionPool","poolConnectionConfig","Pool","execute","query","params","result","err","release","getPoolConnectionInfo","releaseConnection","connectionTimeoutMillis","pgConfig","idleTimeoutMillis","max","getConnectionInfo"],"sources":["../src/graphRepository.ts"],"sourcesContent":["/**\n * File: /src/graphRepository.ts\n * Project: apache-age-client\n * File Created: 13-09-2022 05:34:30\n * Author: Apache Software Foundation\n * -----\n * Last Modified: 13-09-2022 07:56:39\n * Modified By: Clay Risser\n * -----\n * Risser Labs LLC (c) Copyright 2022\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport pg, { PoolConfig, Pool, PoolClient, QueryResult } from \"pg\";\nimport types from \"pg-types\";\nimport { flavors, pg as pgConfig } from \"./config\";\nimport { setAgeTypes } from \"./tools/ageParser\";\nimport { Flavor, ConnectionInfo } from \"./types\";\n\nexport class GraphRepository {\n  flavor: Flavor;\n  private _database?: string;\n  private _graph?: string;\n  private _host?: string;\n  private _password?: string;\n  private _pool?: Pool;\n  private _port?: number;\n  private _user?: string;\n\n  constructor({\n    host,\n    port,\n    database,\n    graph,\n    user,\n    password,\n    flavor,\n  }: ConnectionInfo = {}) {\n    this._host = host;\n    this._port = port;\n    this._database = database;\n    this._graph = graph;\n    this._user = user;\n    this._password = password;\n    this.flavor = flavor || flavors.AGE;\n  }\n\n  static async getConnection(\n    { database, flavor, host, password, port, user }: ConnectionInfo = {},\n    closeConnection = true\n  ): Promise<pg.Client | PoolClient> {\n    const client = new pg.Client({\n      user,\n      password,\n      host,\n      database,\n      port,\n    });\n    client.connect();\n    if (flavor === flavors.AGE) {\n      await setAgeTypes(client, types);\n    } else {\n      throw new Error(`unknown flavor ${flavor}`);\n    }\n    if (closeConnection === true) await client.end();\n    return client;\n  }\n\n  static newConnectionPool(poolConnectionConfig: PoolConfig) {\n    return new pg.Pool(poolConnectionConfig);\n  }\n\n  async execute(\n    query: string,\n    params: (string | undefined)[] = []\n  ): Promise<QueryResult> {\n    const client = await this.getConnection();\n    let result = null;\n    try {\n      result = await client.query(query, params);\n    } catch (err) {\n      throw err;\n    } finally {\n      client.release();\n    }\n    return result;\n  }\n\n  async getConnection() {\n    if (!this._pool) {\n      this._pool = GraphRepository.newConnectionPool(\n        this.getPoolConnectionInfo()\n      );\n    }\n    const client = await this._pool.connect();\n    if (this.flavor === \"AGE\") {\n      await setAgeTypes(client, types);\n    } else {\n      await client.query(`set graph_path = ${this._graph}`);\n    }\n    return client;\n  }\n\n  async releaseConnection() {\n    try {\n      if (this._pool) await this._pool.end();\n      return true;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  getPoolConnectionInfo(): PoolConfig {\n    if (!this._host || !this._port || !this._database) {\n      throw new Error(\"missing connection config\");\n    }\n    return {\n      connectionTimeoutMillis: pgConfig.connectionTimeoutMillis,\n      database: this._database,\n      host: this._host,\n      idleTimeoutMillis: pgConfig.idleTimeoutMillis,\n      max: pgConfig.max,\n      password: this._password,\n      port: this._port,\n      user: this._user,\n    };\n  }\n\n  getConnectionInfo() {\n    if (!this._host || !this._port || !this._database) {\n      throw new Error(\"not connected\");\n    }\n    return {\n      host: this._host,\n      port: this._port,\n      database: this._database,\n      user: this._user,\n      password: this._password,\n      graph: this._graph,\n      flavor: this.flavor,\n    };\n  }\n\n  get graph() {\n    return this._graph;\n  }\n}\n"],"mappings":"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"}